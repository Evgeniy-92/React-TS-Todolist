{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","type","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","touched","Boolean","margin","getFieldProps","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68ba69f8.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2001bc12-c152-42bc-ace8-0356c6077198'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType , AxiosResponse<ResponseType<{userId: number}>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<authMeType>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n// types\r\ntype authMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type FormikErrorType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport type LoginParamsType = FormikErrorType & {\r\n    captcha?: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n// Redux Toolkit free\r\n// export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'login/SET-IS-LOGGED-IN':\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n// actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n// types\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n// type InitialStateType = typeof initialState\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    isInitialized: false,\r\n    error: null,\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status =  action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n// thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({value: true}))\r\n        })\r\n}\r\n\r\n// type\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\n\r\n// Redux Toolkit free\r\n// / export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET-STATUS':\r\n//             return {...state, status: action.status}\r\n//         case 'APP/SET-ERROR':\r\n//             return {...state, error: action.error}\r\n//         case \"APP/SET-INITIALIZED\":\r\n//             return {...state, isInitialized: action.value}\r\n//         default:\r\n//             return {...state}\r\n//     }\r\n// }\r\n// export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n// export const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n// type\r\n// export type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n// export type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n// type ActionsType =\r\n//     | SetAppErrorActionType\r\n//     | SetAppStatusActionType\r\n//     | ReturnType<typeof setIsInitializedAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, } from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='login'/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {FormikErrorType} from \"../../api/todolists-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport s from './Login.module.css'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<FormikErrorType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid email address';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email\r\n                            && formik.errors.email\r\n                            && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password\r\n                            && formik.errors.password\r\n                            && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport {initializeAppTC, RequestStatusType, setIsInitializedAC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path='login' element={<Login/>}/>\r\n                    <Route path='404' element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to={'/404'}/>} />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}